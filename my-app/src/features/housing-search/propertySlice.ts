import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { stat } from 'fs';
import { act } from 'react-dom/test-utils';
import { RootState, AppThunk } from '../../app/store';
import IPagingResults from '../../types/pagingResult.type';
import IPropertySearchParams from '../../types/propertySearchParams.type';
import { getAll, pageResults } from './propertyAPI';

const initialState: IPropertySearchParams = {
    propertyName: "",
    amenity: "",
    minOccupancy: 0,
    maxOccupancy: 0,
    isLoading: false,
    propertyList: [],
    pagingResults: {
      totalCount: 0,
      totalPages: 0,
      currentPage: 0,
      pageSize: 0,
      hasPrevious: false,
      hasNext: false,
      data: [],
    }
};

export const getAllProperties = createAsyncThunk(
  'housing-search/getAll',
  async (searchParams: IPropertySearchParams) => {
    const response = await getAll(searchParams);
    // The value we return becomes the `fulfilled` action payload
    console.log(response.data);
    return response.data;
  }
);

export const getPagingResults = createAsyncThunk(
  'housing-search/pagingResults',
  async (searchParams: IPagingResults) => {
    const response = await pageResults(searchParams);
    // The value we return becomes the `fulfilled` action payload
    console.log(response.data);
    return response.data;
  }
);

export const propertySlice = createSlice({
    name: 'propertySummary',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
      getAllReducer: (state, action: PayloadAction<IPropertySearchParams>) => {
        state.amenity = action.payload.amenity;
        state.maxOccupancy = action.payload.maxOccupancy;
      },
      getPagingReducer: (state, action: PayloadAction<IPagingResults>) => {
        state.pagingResults = state.pagingResults;
      },
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
      builder
        .addCase(getAllProperties.pending, (state) => {
          state.isLoading = true;
        })
        .addCase(getAllProperties.fulfilled, (state, action) => {
          state.isLoading = false;
          state.propertyList = action.payload;
          state.pagingResults.data = action.payload;
        })
        .addCase(getAllProperties.rejected, (state) => {
          state.isLoading = false;
        })
        .addCase(getPagingResults.pending, (state, action) => {
          state.isLoading = true;
        })
        .addCase(getPagingResults.fulfilled, (state, action) => {
          state.isLoading = false;
        })
        .addCase(getPagingResults.rejected, (state, action) => {
          state.isLoading = false;
        });
    },
  });

  export const { getAllReducer, getPagingReducer} = propertySlice.actions;

  export const selectProperty = (state: RootState) => state.property;

  export const getPropertyDisplay = (amount: IPropertySearchParams): AppThunk =>
  (dispatch, getState) => {
    dispatch(getAllReducer(amount));
    const storeValues = selectProperty(getState());
    if (storeValues.propertyList) {
      dispatch(getPagingReducer(storeValues.pagingResults));
    }
  };

  export default propertySlice.reducer;
